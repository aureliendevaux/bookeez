{{{
  exports({
    to: app.migrationsPath(entity.path, migration.fileName)
  })
}}}
import { Kysely, sql } from 'kysely';

import { tableNameGenerator } from '#database/utils';
import type { DB } from '#types/db';

const { tableName, pk, uq, fk } = tableNameGenerator('{{ migration.tableName }}');

export async function up(db: Kysely<DB>): Promise<void> {
	await db.schema
		.createTable(tableName)

		// Columns
		.addColumn('id', 'integer', (col) => col.generatedAlwaysAsIdentity().notNull())
		.addColumn('uid', 'uuid', (col) => col.notNull())
		.addColumn('created_at', 'timestamp', (col) => col.notNull())
		.addColumn('updated_at', 'timestamp', (col) => col.notNull())
		.addColumn('created_by_id', 'integer', (col) => col.defaultTo(sql`now()`))
		.addColumn('updated_by_id', 'integer', (col) => col.defaultTo(sql`now()`))

		// Constraints
		.addPrimaryKeyConstraint(pk(), ['id'])
		.addUniqueConstraint(uq('uid'), ['uid'])
		.addForeignKeyConstraint(fk('created_by_id'), ['created_by_id'], 'users', ['id'], (cb) => cb.onDelete('set null'))
		.addForeignKeyConstraint(fk('updated_by_id'), ['updated_by_id'], 'users', ['id'], (cb) => cb.onDelete('set null'))

		// Run
		.execute()
}

export async function down(db: Kysely<DB>): Promise<void> {
	await db.schema.dropTable(tableName).execute();
}
